<br>
{{#if success_message}}
  <!-- Success Message Alert -->
  <div class="callout success">
    <p>{{success_message}}</p>
  </div>
{{/if}}
<div class="column row">
  <h3 class="float-left">{{title}}</h3>
  <a class="button float-right secondary" href="/messages/create">New Conversation</a>
  <hr>

  <div class="grid-container">
    <div class="grid-x">
      {{#if user_conversations}}
        <div class="cell medium-2 float-left">
          <ul class="vertical tabs" data-tabs id="example-tabs">
            {{#each user_conversations}}
              <li class="tabs-title {{#if @first}}is-active{{/if}}"><a href="#panel_{{_id}}" {{#if @first}}aria-selected="true" {{/if}}>{{name}}</a></li>
            {{/each}}
          </ul>
        </div>
        <div class="cell medium-9 float-right chat-window">
          <div class="tabs-content vertical" data-tabs-content="example-tabs">
            {{#each user_conversations}}
              <div class="tabs-panel {{#if @first}}is-active{{/if}}" id="panel_{{_id}}">
                <h4>{{name}}</h4>
                <sub>Participants: {{#each participants}}{{#if @last}}{{username}}{{else}}{{username}}, {{/if}}{{/each}}</sub>
                <hr />
                {{#if messages}}
                  <div id="{{_id}}_messages" style="height: 21em; line-height: 3em; overflow: auto; padding: 5px;">

                  </div>
                {{else}}
                  <!-- No conversation messages -->
                  <div class="callout primary">
                    <p><em>No messages yet. Be the first to send one!</em></p>
                  </div>
                  <div id="{{_id}}_messages" style="height: 21em; line-height: 3em; overflow: auto; padding: 5px;">

                  </div>
                {{/if}}
                <div id="message_form">
                  <label>
                    <input id="{{_id}}_message" type="text" placeholder="Your message."></input>
                  </label>
                  <button id="{{_id}}_send_message" class="button">Send</button>
                </div>
              </div>
            {{/each}}
          </div>
        </div>
      {{else}}
        <div class="callout secondary">
          <h5><strong>No Conversations</strong></h5>
          <p><em>You are not in any conversations yet.</em></p>
          <a class="button secondary" href="/messages/create">Why not create one?</a>
        </div>
      {{/if}}
    </div>
  </div>
</div>

<br />

<!-- Socket.io Chat System Scripts -->
<script src="/socket.io/socket.io.js" type="text/javascript"></script>

<script>
  // --- Client-Sided Send Handler (Reduce need for page refreshes) ---
  let socket = io();
  $(document).ready(
    () => {
      function scrollToBottom(id){
        let chat_box = document.getElementById(`${id}_messages`);
        chat_box.scrollTop = chat_box.scrollHeight;
      }

    {{#each user_conversations}}
      // Listen for click events on the send button
      $("#{{_id}}_send_message").click(async () => {
        // Send the message
        sendMessage({ message: $("#{{_id}}_message").val() }, "{{_id}}")
        await new Promise(r => setTimeout(r, 300)) // Wait a bit for server to process data
        socket.emit("private_message_sent", "{{_id}}") // Send message sent event
        document.getElementById("{{_id}}_message").value = '' // Empty chat entry box
      })

      // Listen for enter keypress events on the input box
      $("#{{_id}}_message").on("keypress", async (e) => {
        // Ensure it is the enter key
        if (e.which === 13) {
          // Disable the chat box to prevent multiple submissions
          $(this).attr("disabled", "disabled");

          // Send the message
          sendMessage({ message: $("#{{_id}}_message").val() }, "{{_id}}")
          await new Promise(r => setTimeout(r, 300)) // Wait a bit for server to process data
          socket.emit("private_message_sent", "{{_id}}") // Send message sent event
          document.getElementById("{{_id}}_message").value = '' // Empty chat entry box

          // Re-enable the chat box
          $(this).removeAttr("disabled");
        }
      })
    {{/each}}

    // Adds a message to the list of messages
    function addMessage(message, channel_id){
      let timestamp = new Date(message.sent_on)
      $(`#${channel_id}_messages`).append(`
        <div class="column">
          <img class='float-left' src='${message.author.icon_url}' width='25' height='25' alt="${message.author.username}'s profile picture">
          <h6>
            <a href='${message.author.username === "Deleted User" ? "" : "/profile/" + message.author.username}'>${message.author.username}</a><small> - ${String(timestamp.toDateString())} - ${String(timestamp.toLocaleTimeString('en-CA'))}</small>
          </h6>
          <p>
          ${message.message} ${message.edited ? '<small><em>(edited)</em></small>' : ''}
          </p>
        </div>
      `)
    }

    // Gets all the messages from the server.
    function getMessages(id){
      console.log("Fetching messages from server...")

      // Delete all visible messages
      document.getElementById(`${id}_messages`).innerHTML = ''

      // Get new messages and add them.
      $.get(`${window.location.href}/${id}`, (messages) => {
        console.log(messages)
        messages.forEach((message)=>{
          addMessage(message, id)
        })
        scrollToBottom(id)
      })
    }

    // Sends a message to the server.
    function sendMessage(message, id){
      console.log("Sending message to server...")
      $.post(`${window.location.href}/${id}`, message)
      scrollToBottom(id)
    }

    // Register message listener.
    {{#each user_conversations}}
      socket.on('new_private_message_{{_id}}', () => {
        getMessages("{{_id}}")
      })
    {{/each}}

      // Fetch all messages on load.
      {{#each user_conversations}}
        {{#if messages}}
          getMessages("{{_id}}")
          scrollToBottom("{{_id}}")
        {{/if}}
      {{/each}}
    })
</script>
